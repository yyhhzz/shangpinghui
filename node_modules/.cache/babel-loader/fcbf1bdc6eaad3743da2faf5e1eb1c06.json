{"ast":null,"code":"// 配置路由\nimport Vue from 'vue';\nimport VueRouter from 'vue-router'; //引入仓库\n\nimport store from '@/store'; //使用插件\n\nVue.use(VueRouter); //引入路由组件\n\nimport Home from '@/pages/Home';\nimport Login from '@/pages/Login';\nimport Register from '@/pages/Register';\nimport Search from '@/pages/Search';\nimport Detail from '@/pages/Detail';\nimport AddCartSuccess from '@/pages/AddCartSuccess';\nimport ShopCart from '@/pages/ShopCart';\nimport Trade from '@/pages/Trade';\nimport Pay from '@/pages/Pay';\nimport PaySuccess from '@/pages/PaySuccess';\nimport Center from '@/pages/Center'; // 引入二级路由组件\n\nimport MyOrder from '@/pages/Center/MyOrder';\nimport GroupOrder from '@/pages/Center/GoupOrder'; // 重写push replace 解决编程式导航连续点击报错的问题\n\nlet originPush = VueRouter.prototype.push;\nlet originReplace = VueRouter.prototype.replace;\n\nVueRouter.prototype.push = function (location, resolve, reject) {\n  if (resolve && reject) {\n    originPush.call(this, location, resolve, reject);\n  } else {\n    originPush.call(this, location, () => {}, () => {});\n  }\n};\n\nVueRouter.prototype.replace = function (location, resolve, reject) {\n  if (resolve && reject) {\n    originReplace.call(this, location, resolve, reject);\n  } else {\n    originReplace.call(this, location, () => {}, () => {});\n  }\n}; //配置路由\n\n\nlet router = new VueRouter({\n  //配置路由\n  routes: [{\n    path: \"/center\",\n    component: Center,\n    meta: {\n      show: true\n    },\n    //路由元信息\n    // 二级路由\n    children: [{\n      path: 'myorder',\n      component: MyOrder\n    }, {\n      path: 'grouporder',\n      component: GroupOrder\n    }, {\n      path: '/center',\n      redirect: '/center/myorder'\n    }]\n  }, {\n    path: \"/paysuccess\",\n    component: PaySuccess,\n    meta: {\n      show: true\n    },\n    //路由元信息\n    name: \"paysuccess\"\n  }, {\n    path: \"/pay\",\n    component: Pay,\n    meta: {\n      show: true\n    },\n    //路由元信息\n    name: \"pay\",\n    beforeEnter: (to, from, next) => {}\n  }, {\n    path: \"/trade\",\n    component: Trade,\n    meta: {\n      show: true\n    },\n    //路由元信息\n    name: \"trade\",\n    // 路由独享守卫，只能从shopcart前往trade\n    beforeEnter: (to, from, next) => {\n      if (from.path == '/shopcart') {\n        next();\n      } else {\n        next(false);\n      }\n    }\n  }, {\n    path: \"/shopcart\",\n    component: ShopCart,\n    meta: {\n      show: true\n    },\n    //路由元信息\n    name: \"shopcart\"\n  }, {\n    path: \"/addcartsuccess\",\n    component: AddCartSuccess,\n    meta: {\n      show: true\n    },\n    //路由元信息\n    name: \"addcartsuccess\"\n  }, {\n    path: \"/detail/:skuId?\",\n    component: Detail,\n    meta: {\n      show: true\n    } //路由元信息\n\n  }, {\n    path: \"/home\",\n    component: Home,\n    meta: {\n      show: true\n    } //路由元信息\n\n  }, {\n    path: \"/login\",\n    component: Login,\n    meta: {\n      show: false\n    }\n  }, {\n    path: \"/register\",\n    component: Register,\n    meta: {\n      show: false\n    }\n  }, {\n    path: \"/search/:keyword?\",\n    component: Search,\n    meta: {\n      show: true\n    },\n    name: \"search\"\n  }, {\n    path: '/',\n    redirect: '/home'\n  }],\n\n  // 跳转后滚动到顶部\n  scrollBehavior(to, from, savedPosition) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n\n});\nexport default router; // 全局前置守卫，路由跳转之前判断\n\nrouter.beforeEach(async (to, from, next) => {\n  let hasToken = store.state.user.token;\n  let hasName = store.state.user.name;\n\n  if (hasToken) {\n    if (to.path == '/login' || to.path == \"/register\") {\n      next('/home'); //用户登录了，再次访问登录界面，跳转首页\n    } else {\n      //用户登陆了,而且还有用户信息【去的并非是login】\n      if (hasName) {\n        next();\n      } else {\n        //用户登陆了,但是没有用户信息 \n        try {\n          //发请求获取用户信息以后在放行\n          await store.dispatch('getUserInfo');\n          next();\n        } catch (error) {\n          //用户没有信息，还携带token发请求获取用户信息【失败】\n          //token失效:本地清空数据、服务器的token通知服务器清除\n          await store.dispatch('userLogout'); //回到登录页,获取新的token\n\n          next('/login');\n        }\n      }\n    }\n  } else {\n    // 用户未登录\n    let toPath = to.path;\n\n    if (toPath.indexOf('trade') != -1 || toPath.indexOf('pay') != -1 || toPath.indexOf('center') != -1) {\n      next('/login?redirect=' + toPath);\n    } else {\n      next();\n    }\n  }\n});","map":{"version":3,"names":["Vue","VueRouter","store","use","Home","Login","Register","Search","Detail","AddCartSuccess","ShopCart","Trade","Pay","PaySuccess","Center","MyOrder","GroupOrder","originPush","prototype","push","originReplace","replace","location","resolve","reject","call","router","routes","path","component","meta","show","children","redirect","name","beforeEnter","to","from","next","scrollBehavior","savedPosition","x","y","beforeEach","hasToken","state","user","token","hasName","dispatch","error","toPath","indexOf"],"sources":["/Users/yanghuazhou/Desktop/前端/project-shop/src/router/index.js"],"sourcesContent":["// 配置路由\nimport Vue from 'vue';\nimport VueRouter from 'vue-router';\n//引入仓库\nimport store from '@/store'\n\n//使用插件\nVue.use(VueRouter)\n\n//引入路由组件\nimport Home from '@/pages/Home';\nimport Login from '@/pages/Login';\nimport Register from '@/pages/Register';\nimport Search from '@/pages/Search';\nimport Detail from '@/pages/Detail';\nimport AddCartSuccess from '@/pages/AddCartSuccess';\nimport ShopCart from '@/pages/ShopCart';\nimport Trade from '@/pages/Trade';\nimport Pay from '@/pages/Pay';\nimport PaySuccess from '@/pages/PaySuccess'\nimport Center from '@/pages/Center'\n// 引入二级路由组件\nimport MyOrder from '@/pages/Center/MyOrder'\nimport GroupOrder from '@/pages/Center/GoupOrder'\n\n// 重写push replace 解决编程式导航连续点击报错的问题\nlet originPush = VueRouter.prototype.push;\nlet originReplace = VueRouter.prototype.replace;\n\nVueRouter.prototype.push = function (location, resolve, reject) {\n    if(resolve && reject){\n        originPush.call(this,location,resolve,reject)\n    }else{\n        originPush.call(this,location,()=>{},()=>{})\n    }\n}\nVueRouter.prototype.replace = function (location, resolve, reject) {\n    if(resolve && reject){\n        originReplace.call(this,location,resolve,reject)\n    }else{\n        originReplace.call(this,location,()=>{},()=>{})\n    }\n}\n\n\n//配置路由\nlet router =  new VueRouter({\n    //配置路由\n    routes:[\n        {\n            path:\"/center\",\n            component:Center,\n            meta:{show:true},//路由元信息\n            // 二级路由\n            children:[\n                {\n                    path:'myorder',\n                    component:MyOrder\n                },\n                {\n                    path:'grouporder',\n                    component:GroupOrder\n                },\n                {\n                    path:'/center',\n                    redirect:'/center/myorder'\n                }\n            ]\n        }\n        ,\n        {\n            path:\"/paysuccess\",\n            component:PaySuccess,\n            meta:{show:true},//路由元信息\n            name:\"paysuccess\",\n        }\n        ,\n        {\n            path:\"/pay\",\n            component:Pay,\n            meta:{show:true},//路由元信息\n            name:\"pay\",\n            beforeEnter: (to, from, next) => {\n                \n            }\n        }\n        ,\n        {\n            path:\"/trade\",\n            component:Trade,\n            meta:{show:true},//路由元信息\n            name:\"trade\",\n            // 路由独享守卫，只能从shopcart前往trade\n            beforeEnter: (to, from, next) => {\n                if(from.path == '/shopcart'){\n                    next()\n                }else{\n                    next(false)\n                }\n            }\n        }\n        ,\n        {\n            path:\"/shopcart\",\n            component:ShopCart,\n            meta:{show:true},//路由元信息\n            name:\"shopcart\",\n        }\n        ,\n        {\n            path:\"/addcartsuccess\",\n            component:AddCartSuccess,\n            meta:{show:true},//路由元信息\n            name:\"addcartsuccess\",\n        }\n        ,\n        {\n            path:\"/detail/:skuId?\",\n            component:Detail,\n            meta:{show:true}//路由元信息\n        }\n        ,\n        {\n            path:\"/home\",\n            component:Home,\n            meta:{show:true}//路由元信息\n        },\n        {\n            path:\"/login\",\n            component:Login,\n            meta:{show:false}\n        },\n        {\n            path:\"/register\",\n            component:Register,\n            meta:{show:false}\n        },\n        {\n            path:\"/search/:keyword?\",\n            component:Search,\n            meta:{show:true},\n            name:\"search\"\n        },\n        {\n            path: '/',\n            redirect: '/home'\n        }\n    ],\n    // 跳转后滚动到顶部\n    scrollBehavior (to, from, savedPosition) {\n        return { x: 0, y: 0 }\n      }\n\n})\nexport default router\n\n// 全局前置守卫，路由跳转之前判断\nrouter.beforeEach(async(to,from,next)=>{\n\n    let hasToken = store.state.user.token\n    let hasName = store.state.user.name\n    if(hasToken){\n        if(to.path == '/login' || to.path == \"/register\") {\n            next('/home') //用户登录了，再次访问登录界面，跳转首页\n        }else{\n            //用户登陆了,而且还有用户信息【去的并非是login】\n            if (hasName) {\n                next();\n            } else {\n                //用户登陆了,但是没有用户信息 \n                try {\n                    //发请求获取用户信息以后在放行\n                    await store.dispatch('getUserInfo');\n                    next();\n                } catch (error) {\n                    //用户没有信息，还携带token发请求获取用户信息【失败】\n                    //token失效:本地清空数据、服务器的token通知服务器清除\n                    await store.dispatch('userLogout');\n                    //回到登录页,获取新的token\n                    next('/login');\n                }\n            }\n        }\n    }else{\n        // 用户未登录\n        let toPath = to.path\n            if(toPath.indexOf('trade')!=-1 || toPath.indexOf('pay')!=-1 || toPath.indexOf('center')!=-1){\n                next('/login?redirect='+toPath);\n            }else{\n                next();\n            }\n    }\n})\n\n\n "],"mappings":"AAAA;AACA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CACA;;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CAEA;;AACAF,GAAG,CAACG,GAAJ,CAAQF,SAAR,E,CAEA;;AACA,OAAOG,IAAP,MAAiB,cAAjB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,OAAOC,MAAP,MAAmB,gBAAnB,C,CACA;;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,UAAP,MAAuB,0BAAvB,C,CAEA;;AACA,IAAIC,UAAU,GAAGhB,SAAS,CAACiB,SAAV,CAAoBC,IAArC;AACA,IAAIC,aAAa,GAAGnB,SAAS,CAACiB,SAAV,CAAoBG,OAAxC;;AAEApB,SAAS,CAACiB,SAAV,CAAoBC,IAApB,GAA2B,UAAUG,QAAV,EAAoBC,OAApB,EAA6BC,MAA7B,EAAqC;EAC5D,IAAGD,OAAO,IAAIC,MAAd,EAAqB;IACjBP,UAAU,CAACQ,IAAX,CAAgB,IAAhB,EAAqBH,QAArB,EAA8BC,OAA9B,EAAsCC,MAAtC;EACH,CAFD,MAEK;IACDP,UAAU,CAACQ,IAAX,CAAgB,IAAhB,EAAqBH,QAArB,EAA8B,MAAI,CAAE,CAApC,EAAqC,MAAI,CAAE,CAA3C;EACH;AACJ,CAND;;AAOArB,SAAS,CAACiB,SAAV,CAAoBG,OAApB,GAA8B,UAAUC,QAAV,EAAoBC,OAApB,EAA6BC,MAA7B,EAAqC;EAC/D,IAAGD,OAAO,IAAIC,MAAd,EAAqB;IACjBJ,aAAa,CAACK,IAAd,CAAmB,IAAnB,EAAwBH,QAAxB,EAAiCC,OAAjC,EAAyCC,MAAzC;EACH,CAFD,MAEK;IACDJ,aAAa,CAACK,IAAd,CAAmB,IAAnB,EAAwBH,QAAxB,EAAiC,MAAI,CAAE,CAAvC,EAAwC,MAAI,CAAE,CAA9C;EACH;AACJ,CAND,C,CASA;;;AACA,IAAII,MAAM,GAAI,IAAIzB,SAAJ,CAAc;EACxB;EACA0B,MAAM,EAAC,CACH;IACIC,IAAI,EAAC,SADT;IAEIC,SAAS,EAACf,MAFd;IAGIgB,IAAI,EAAC;MAACC,IAAI,EAAC;IAAN,CAHT;IAGqB;IACjB;IACAC,QAAQ,EAAC,CACL;MACIJ,IAAI,EAAC,SADT;MAEIC,SAAS,EAACd;IAFd,CADK,EAKL;MACIa,IAAI,EAAC,YADT;MAEIC,SAAS,EAACb;IAFd,CALK,EASL;MACIY,IAAI,EAAC,SADT;MAEIK,QAAQ,EAAC;IAFb,CATK;EALb,CADG,EAsBH;IACIL,IAAI,EAAC,aADT;IAEIC,SAAS,EAAChB,UAFd;IAGIiB,IAAI,EAAC;MAACC,IAAI,EAAC;IAAN,CAHT;IAGqB;IACjBG,IAAI,EAAC;EAJT,CAtBG,EA6BH;IACIN,IAAI,EAAC,MADT;IAEIC,SAAS,EAACjB,GAFd;IAGIkB,IAAI,EAAC;MAACC,IAAI,EAAC;IAAN,CAHT;IAGqB;IACjBG,IAAI,EAAC,KAJT;IAKIC,WAAW,EAAE,CAACC,EAAD,EAAKC,IAAL,EAAWC,IAAX,KAAoB,CAEhC;EAPL,CA7BG,EAuCH;IACIV,IAAI,EAAC,QADT;IAEIC,SAAS,EAAClB,KAFd;IAGImB,IAAI,EAAC;MAACC,IAAI,EAAC;IAAN,CAHT;IAGqB;IACjBG,IAAI,EAAC,OAJT;IAKI;IACAC,WAAW,EAAE,CAACC,EAAD,EAAKC,IAAL,EAAWC,IAAX,KAAoB;MAC7B,IAAGD,IAAI,CAACT,IAAL,IAAa,WAAhB,EAA4B;QACxBU,IAAI;MACP,CAFD,MAEK;QACDA,IAAI,CAAC,KAAD,CAAJ;MACH;IACJ;EAZL,CAvCG,EAsDH;IACIV,IAAI,EAAC,WADT;IAEIC,SAAS,EAACnB,QAFd;IAGIoB,IAAI,EAAC;MAACC,IAAI,EAAC;IAAN,CAHT;IAGqB;IACjBG,IAAI,EAAC;EAJT,CAtDG,EA6DH;IACIN,IAAI,EAAC,iBADT;IAEIC,SAAS,EAACpB,cAFd;IAGIqB,IAAI,EAAC;MAACC,IAAI,EAAC;IAAN,CAHT;IAGqB;IACjBG,IAAI,EAAC;EAJT,CA7DG,EAoEH;IACIN,IAAI,EAAC,iBADT;IAEIC,SAAS,EAACrB,MAFd;IAGIsB,IAAI,EAAC;MAACC,IAAI,EAAC;IAAN,CAHT,CAGoB;;EAHpB,CApEG,EA0EH;IACIH,IAAI,EAAC,OADT;IAEIC,SAAS,EAACzB,IAFd;IAGI0B,IAAI,EAAC;MAACC,IAAI,EAAC;IAAN,CAHT,CAGoB;;EAHpB,CA1EG,EA+EH;IACIH,IAAI,EAAC,QADT;IAEIC,SAAS,EAACxB,KAFd;IAGIyB,IAAI,EAAC;MAACC,IAAI,EAAC;IAAN;EAHT,CA/EG,EAoFH;IACIH,IAAI,EAAC,WADT;IAEIC,SAAS,EAACvB,QAFd;IAGIwB,IAAI,EAAC;MAACC,IAAI,EAAC;IAAN;EAHT,CApFG,EAyFH;IACIH,IAAI,EAAC,mBADT;IAEIC,SAAS,EAACtB,MAFd;IAGIuB,IAAI,EAAC;MAACC,IAAI,EAAC;IAAN,CAHT;IAIIG,IAAI,EAAC;EAJT,CAzFG,EA+FH;IACIN,IAAI,EAAE,GADV;IAEIK,QAAQ,EAAE;EAFd,CA/FG,CAFiB;;EAsGxB;EACAM,cAAc,CAAEH,EAAF,EAAMC,IAAN,EAAYG,aAAZ,EAA2B;IACrC,OAAO;MAAEC,CAAC,EAAE,CAAL;MAAQC,CAAC,EAAE;IAAX,CAAP;EACD;;AAzGqB,CAAd,CAAd;AA4GA,eAAehB,MAAf,C,CAEA;;AACAA,MAAM,CAACiB,UAAP,CAAkB,OAAMP,EAAN,EAASC,IAAT,EAAcC,IAAd,KAAqB;EAEnC,IAAIM,QAAQ,GAAG1C,KAAK,CAAC2C,KAAN,CAAYC,IAAZ,CAAiBC,KAAhC;EACA,IAAIC,OAAO,GAAG9C,KAAK,CAAC2C,KAAN,CAAYC,IAAZ,CAAiBZ,IAA/B;;EACA,IAAGU,QAAH,EAAY;IACR,IAAGR,EAAE,CAACR,IAAH,IAAW,QAAX,IAAuBQ,EAAE,CAACR,IAAH,IAAW,WAArC,EAAkD;MAC9CU,IAAI,CAAC,OAAD,CAAJ,CAD8C,CAChC;IACjB,CAFD,MAEK;MACD;MACA,IAAIU,OAAJ,EAAa;QACTV,IAAI;MACP,CAFD,MAEO;QACH;QACA,IAAI;UACA;UACA,MAAMpC,KAAK,CAAC+C,QAAN,CAAe,aAAf,CAAN;UACAX,IAAI;QACP,CAJD,CAIE,OAAOY,KAAP,EAAc;UACZ;UACA;UACA,MAAMhD,KAAK,CAAC+C,QAAN,CAAe,YAAf,CAAN,CAHY,CAIZ;;UACAX,IAAI,CAAC,QAAD,CAAJ;QACH;MACJ;IACJ;EACJ,CAtBD,MAsBK;IACD;IACA,IAAIa,MAAM,GAAGf,EAAE,CAACR,IAAhB;;IACI,IAAGuB,MAAM,CAACC,OAAP,CAAe,OAAf,KAAyB,CAAC,CAA1B,IAA+BD,MAAM,CAACC,OAAP,CAAe,KAAf,KAAuB,CAAC,CAAvD,IAA4DD,MAAM,CAACC,OAAP,CAAe,QAAf,KAA0B,CAAC,CAA1F,EAA4F;MACxFd,IAAI,CAAC,qBAAmBa,MAApB,CAAJ;IACH,CAFD,MAEK;MACDb,IAAI;IACP;EACR;AACJ,CAnCD"},"metadata":{},"sourceType":"module"}