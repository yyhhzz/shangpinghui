{"ast":null,"code":"import { mapGetters } from \"_vuex@3.6.2@vuex\";\nimport throttle from \"lodash/throttle\";\nexport default {\n  name: \"ShopCart\",\n\n  mounted() {\n    this.getData();\n  },\n\n  methods: {\n    // 购物车防抖函数\n    debounce(fn, wait) {\n      var timeout = null;\n      return function () {\n        if (timeout !== null) clearTimeout(timeout);\n        timeout = setTimeout(fn, wait);\n      };\n    },\n\n    // 派发action\n    getData() {\n      this.$store.dispatch(\"getCarList\");\n    },\n\n    // 更改购物车数量（需要节流）\n    handler: throttle(async function (type, disNum, cart) {\n      // console.log(type,disNum,cart);\n      switch (type) {\n        case \"add\":\n          disNum = 1;\n          break;\n\n        case \"minus\":\n          // 产品个数大于1，才减1\n          disNum = cart.skuNum > 1 ? -1 : 0;\n          break;\n\n        case \"change\":\n          disNum = disNum ? disNum - cart.skuNum : 0;\n          break;\n      }\n\n      try {\n        await this.$store.dispatch(\"addorUpdateShopCart\", {\n          skuId: cart.skuId,\n          skuNum: disNum\n        }); // 连续修改数量时防抖\n\n        this.getData();\n      } catch (error) {\n        alert(\"购物车数量修改失败\");\n      }\n    }, 100),\n\n    // 删除某一个购物车产品\n    async deleteCart(cart) {\n      let skuId = cart.skuId;\n\n      try {\n        //删除商品成功\n        await this.$store.dispatch(\"deleteCartById\", skuId); //再次获取购物车最新的数据\n\n        this.getData();\n      } catch (error) {\n        alert(\"删除失败\");\n      }\n    },\n\n    // 删除全部选中产品\n    async deleteAllCheckedCart() {\n      try {\n        await this.$store.dispatch('deleteAllCheckedCart');\n        this.getData();\n      } catch (error) {\n        alert('删除失败');\n      }\n    },\n\n    // 修改某个产品选中状态\n    async updateChecked(cart, e) {\n      let params = {\n        skuId: cart.skuId,\n        isChecked: e.target.checked ? \"1\" : \"0\"\n      };\n\n      try {\n        await this.$store.dispatch('updateCheckedById', params);\n        this.getData();\n      } catch (error) {\n        alert(error.message);\n      }\n    },\n\n    // 全选\n    async allUpdateChecked(e) {\n      let isChecked = e.target.checked ? '1' : '0';\n\n      try {\n        await this.$store.dispatch('allUpdateChecked', isChecked);\n        this.getData();\n      } catch (error) {\n        alert(error.message);\n      }\n    }\n\n  },\n  computed: { ...mapGetters([\"cartList\"]),\n\n    // 购物车数据\n    cartInfoList() {\n      return this.cartList.cartInfoList || [];\n    },\n\n    // 商品总价\n    totalPrice() {\n      let sum = 0;\n      this.cartInfoList.filter(item => item.isChecked == 1).forEach(item => sum += item.skuNum * item.skuPrice);\n      return sum;\n    },\n\n    isCartChecked() {\n      return this.cartInfoList.every(item => item.isChecked == 1);\n    },\n\n    totalChecked() {\n      return this.cartInfoList.filter(item => item.isChecked == 1);\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}