{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n// 二次封装axios\nimport axios, { Axios } from 'axios'; // create 方法创造一个axios实例\n\nconst requests = axios.create({\n  // 基础路径\n  baseURL: '/api',\n  // 代表请求超时的时间为5秒\n  timeout: 5000\n}); // 1.请求拦截器\n\nrequests.interceptors.request.use(config => {\n  // 配置对象里的headers请求头很重要\n  return config;\n}); // 2.响应拦截器\n\nrequests.interceptors.response.use(res => {\n  // 成功的回调函数：服务器相应的数据回来以后，响应拦截器可以检测到，可以做一些事情\n  return res.date;\n}, error => {\n  return Promise.reject(new Error('faile'));\n}); //最后需要暴露:暴露的是添加新的功能的axios,即为requests\n\nexport default requests;","map":{"version":3,"names":["axios","Axios","requests","create","baseURL","timeout","interceptors","request","use","config","response","res","date","error","Promise","reject","Error"],"sources":["/Users/yanghuazhou/Desktop/前端/project-shop/src/api/request.js"],"sourcesContent":["// 二次封装axios\nimport axios, { Axios } from 'axios';\n\n// create 方法创造一个axios实例\nconst requests = axios.create({\n    // 基础路径\n    baseURL:'/api',\n    // 代表请求超时的时间为5秒\n    timeout:5000\n})\n\n// 1.请求拦截器\nrequests.interceptors.request.use((config)=>{\n    // 配置对象里的headers请求头很重要\n    return config;\n})\n\n// 2.响应拦截器\nrequests.interceptors.response.use((res)=>{\n    // 成功的回调函数：服务器相应的数据回来以后，响应拦截器可以检测到，可以做一些事情\n    return res.date;\n},(error)=>{\n    return Promise.reject(new Error('faile'))\n})\n\n//最后需要暴露:暴露的是添加新的功能的axios,即为requests\nexport default requests;"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,KAAhB,QAA6B,OAA7B,C,CAEA;;AACA,MAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAN,CAAa;EAC1B;EACAC,OAAO,EAAC,MAFkB;EAG1B;EACAC,OAAO,EAAC;AAJkB,CAAb,CAAjB,C,CAOA;;AACAH,QAAQ,CAACI,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAmCC,MAAD,IAAU;EACxC;EACA,OAAOA,MAAP;AACH,CAHD,E,CAKA;;AACAP,QAAQ,CAACI,YAAT,CAAsBI,QAAtB,CAA+BF,GAA/B,CAAoCG,GAAD,IAAO;EACtC;EACA,OAAOA,GAAG,CAACC,IAAX;AACH,CAHD,EAGGC,KAAD,IAAS;EACP,OAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,OAAV,CAAf,CAAP;AACH,CALD,E,CAOA;;AACA,eAAed,QAAf"},"metadata":{},"sourceType":"module"}