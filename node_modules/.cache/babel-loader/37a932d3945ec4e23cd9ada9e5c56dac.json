{"ast":null,"code":"// 配置路由\nimport Vue from 'vue';\nimport VueRouter from 'vue-router'; //引入仓库\n\nimport store from '@/store'; //使用插件\n\nVue.use(VueRouter); // 重写push replace 解决编程式导航连续点击报错的问题\n\nlet originPush = VueRouter.prototype.push;\nlet originReplace = VueRouter.prototype.replace;\n\nVueRouter.prototype.push = function (location, resolve, reject) {\n  if (resolve && reject) {\n    originPush.call(this, location, resolve, reject);\n  } else {\n    originPush.call(this, location, () => {}, () => {});\n  }\n};\n\nVueRouter.prototype.replace = function (location, resolve, reject) {\n  if (resolve && reject) {\n    originReplace.call(this, location, resolve, reject);\n  } else {\n    originReplace.call(this, location, () => {}, () => {});\n  }\n}; //配置路由\n\n\nlet router = new VueRouter({\n  //配置路由\n  routes: [{\n    path: \"/center\",\n    component: () => import('@/pages/Center'),\n    meta: {\n      show: true\n    },\n    //路由元信息\n    // 二级路由\n    children: [{\n      path: 'myorder',\n      component: () => import('@/pages/Center/MyOrder')\n    }, {\n      path: 'grouporder',\n      component: () => import('@/pages/Center/GoupOrder')\n    }, {\n      path: '/center',\n      redirect: '/center/myorder'\n    }]\n  }, {\n    path: \"/paysuccess\",\n    component: () => import('@/pages/PaySuccess'),\n    meta: {\n      show: true\n    },\n    //路由元信息\n    name: \"paysuccess\"\n  }, {\n    path: \"/pay\",\n    component: () => import('@/pages/Pay'),\n    meta: {\n      show: true\n    },\n    //路由元信息\n    name: \"pay\",\n    beforeEnter: (to, from, next) => {\n      // 只能从tarde前往pay\n      if (from.path == '/trade') {\n        next();\n      } else {\n        next(false);\n      }\n    }\n  }, {\n    path: \"/trade\",\n    component: () => import('@/pages/Trade'),\n    meta: {\n      show: true\n    },\n    //路由元信息\n    name: \"trade\",\n    // 路由独享守卫，只能从shopcart前往trade\n    beforeEnter: (to, from, next) => {\n      if (from.path == '/shopcart') {\n        next();\n      } else {\n        next(false);\n      }\n    }\n  }, {\n    path: \"/shopcart\",\n    component: () => import('@/pages/ShopCart'),\n    meta: {\n      show: true\n    },\n    //路由元信息\n    name: \"shopcart\"\n  }, {\n    path: \"/addcartsuccess\",\n    component: () => import('@/pages/AddCartSuccess'),\n    meta: {\n      show: true\n    },\n    //路由元信息\n    name: \"addcartsuccess\"\n  }, {\n    path: \"/detail/:skuId?\",\n    component: () => import('@/pages/Detail'),\n    meta: {\n      show: true\n    } //路由元信息\n\n  }, {\n    path: \"/home\",\n    component: () => import('@/pages/Home'),\n    meta: {\n      show: true\n    } //路由元信息\n\n  }, {\n    path: \"/login\",\n    component: () => import('@/pages/Login'),\n    meta: {\n      show: false\n    }\n  }, {\n    path: \"/register\",\n    component: () => import('@/pages/Register'),\n    meta: {\n      show: false\n    }\n  }, {\n    path: \"/search/:keyword?\",\n    component: () => import('@/pages/Search'),\n    meta: {\n      show: true\n    },\n    name: \"search\"\n  }, {\n    path: '/',\n    redirect: '/home'\n  }],\n\n  // 跳转后滚动到顶部\n  scrollBehavior(to, from, savedPosition) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n\n});\nexport default router; // 全局前置守卫，路由跳转之前判断\n\nrouter.beforeEach(async (to, from, next) => {\n  let hasToken = store.state.user.token;\n  let hasName = store.state.user.name;\n\n  if (hasToken) {\n    if (to.path == '/login' || to.path == \"/register\") {\n      next('/home'); //用户登录了，再次访问登录界面，跳转首页\n    } else {\n      //用户登陆了,而且还有用户信息【去的并非是login】\n      if (hasName) {\n        next();\n      } else {\n        //用户登陆了,但是没有用户信息 \n        try {\n          //发请求获取用户信息以后在放行\n          await store.dispatch('getUserInfo');\n          next();\n        } catch (error) {\n          //用户没有信息，还携带token发请求获取用户信息【失败】\n          //token失效:本地清空数据、服务器的token通知服务器清除\n          await store.dispatch('userLogout'); //回到登录页,获取新的token\n\n          next('/login');\n        }\n      }\n    }\n  } else {\n    // 用户未登录\n    let toPath = to.path;\n\n    if (toPath.indexOf('trade') != -1 || toPath.indexOf('pay') != -1 || toPath.indexOf('center') != -1) {\n      next('/login?redirect=' + toPath);\n    } else {\n      next();\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module"}