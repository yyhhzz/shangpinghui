{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n// 二次封装axios\nimport axios, { Axios } from 'axios'; // 引入进度条\n\nimport nProgress from 'nprogress'; // 引入进度条样式\n\nimport 'nprogress/nprogress.css'; // 可以在css文件修改颜色\n\nimport store from '@/store'; // create 方法创造一个axios实例\n\nconst requests = axios.create({\n  // 基础路径\n  baseURL: '/api',\n  // 代表请求超时的时间为5秒\n  timeout: 5000\n}); // 1.请求拦截器\n\nrequests.interceptors.request.use(config => {\n  nProgress.start(); //进度条开始\n  // 配置对象里的headers请求头很重要\n\n  if (store.state.detail.uuid_token) {\n    // 请求头添加字段userTempId，和后端确定\n    config.headers.userTempId = store.state.detail.uuid_token;\n  } // 需要携带token带给服务器\n\n\n  if (store.state.user.token) {\n    config.headers.token = store.state.user.token;\n  }\n\n  return config;\n}); // 2.响应拦截器\n\nrequests.interceptors.response.use(res => {\n  nProgress.done(); // 进度条结束\n  // 成功的回调函数：服务器相应的数据回来以后，响应拦截器可以检测到，可以做一些事情\n\n  return res.data;\n}, error => {\n  return Promise.reject(new Error('faile'));\n}); //最后需要暴露:暴露的是添加新的功能的axios,即为requests\n\nexport default requests;","map":null,"metadata":{},"sourceType":"module"}